28a29,32
> #NOTE: The generic -fsanitize=undefined flag is being used due to interoperability 
> #      both with gcc and clang. Future research and fixes could add each specific 
> #      undefined behavior flag.
> 
41,43c45,47
< atf_test_case int_add_overflow
< int_add_overflow_head() {
< 	atf_set "descr" "Test Undefined Behavior for int addition overflows"
---
> atf_test_case int_sub_overflow
> int_sub_overflow_head() {
> 	atf_set "descr" "Test Undefined Behavior for int subtraction overflows"
47,49c51,53
< atf_test_case int_add_overflow_profile
< int_add_overflow_profile_head() {
< 	atf_set "descr" "Test Undefined Behavior for int addition overflows with profiling option"
---
> atf_test_case int_sub_overflow_profile
> int_sub_overflow_profile_head() {
> 	atf_set "descr" "Test Undefined Behavior for int subtraction overflows with profiling option"
52,54c56,58
< atf_test_case int_add_overflow_pic
< int_add_overflow_pic_head() {
< 	atf_set "descr" "Test Undefined Behavior for int addition overflows with position independent code (PIC) flag"
---
> atf_test_case int_sub_overflow_pic
> int_sub_overflow_pic_head() {
> 	atf_set "descr" "Test Undefined Behavior for int subtraction overflows with position independent code (PIC) flag"
57,59c61,63
< atf_test_case int_add_overflow_pie
< int_add_overflow_pie_head() {
< 	atf_set "descr" "Test Undefined Behavior for int addition overflows with position independent execution (PIE) flag"
---
> atf_test_case int_sub_overflow_pie
> int_sub_overflow_pie_head() {
> 	atf_set "descr" "Test Undefined Behavior for int subtraction overflows with position independent execution (PIE) flag"
62,64c66,68
< atf_test_case int_add_overflow32
< int_add_overflow32_head() {
< 	atf_set "descr" "Test Undefined Behavior for int addition overflows in NetBSD_32 emulation"
---
> atf_test_case int_sub_overflow32
> int_sub_overflow32_head() {
> 	atf_set "descr" "Test Undefined Behavior for int subtraction overflows in NetBSD 32 Emulation"
69c73
< int_add_overflow_body(){
---
> int_sub_overflow_body(){
74c78
< int main(int argc, char **argv) { int l = INT_MAX; l+=argc; printf("%d\n", l); exit(0); }
---
> int main(int argc, char **argv) { int l = INT_MIN; l-= argc; printf("CHECK\n"); exit(0); }
78c82
< 	atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./test
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
81c85
< int_add_overflow_profile_body(){
---
> int_sub_overflow_profile_body(){
86c90
< int main(int argc, char **argv) { int l = INT_MAX; l+=argc; printf("%d\n", l); exit(0); }
---
> int main(int argc, char **argv) { int l = INT_MIN; l-= argc; printf("CHECK\n"); exit(0); }
90c94
< 	atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./test
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
93c97
< int_add_overflow_pic_body(){
---
> int_sub_overflow_pic_body(){
98c102
< int main(int argc, char **argv) { help(argc); exit(0); }
---
> int main(int argc, char **argv) { help(argc); printf("CHECK\n"); exit(0); }
105c109
< void help(int count) { int l = INT_MAX; l+= count; printf("%d\n", l);}
---
> void help(int count) { int l = INT_MIN; l-= count; }
109c113
< 	cc -o test test.c -fsanitize=undefined -L. -ltest
---
> 	cc -o test test.c -fsanitize=undefined -L -ltest
112c116
< 	atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./test
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
115c119
< int_add_overflow_pie_body(){
---
> int_sub_overflow_pie_body(){
118c122
< 	if ! cc -pie -dM -E - < /dev/null 2>/dev/null >/dev/null; then 
---
> 	if ! cc -pie -dM -E - < /dev/null 3>/dev/null >/dev/null; then 
125c129
< int main(int argc, char **argv) { int l = INT_MAX; l+= argc; printf("%d\n", l); exit(0); }
---
> int main(int argc, char **argv) { int l = INT_MIN; l-= argc; printf("CHECK\n"); exit(0); }
129c133
< 	atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./test
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
133c137
< int_add_overflow32_body(){
---
> int_sub_overflow32_body(){
139c143
< 	if ! cc -m32 -dM -E - < /dev/null 2>/dev/null > ./def32; then
---
> 	if ! cc -m32 -dM -E - < /dev/null 3>/dev/null > ./def32; then
151c155
< int main(int argc, char **argv) { int l = INT_MAX; l+= argc; printf("%d\n", l); exit(0); }
---
> int main(int argc, char **argv) { int l = INT_MIN; l-= argc; printf("CHECK\n"); exit(0); }
154,157c158,161
< 	cc -fsanitize=undefined -o md32 -m32 test.c
< 	cc -fsanitize=undefined -o md64 test.c
< 	file -b ./md32 > ./ftype32
< 	file -b ./md64 > ./ftype64
---
> 	cc -fsanitize=undefined -o df32 -m32 test.c
> 	cc -fsanitize=undefined -o df64 test.c
> 	file -b ./df32 > ./ftype32
> 	file -b ./df64 > ./ftype64
165c169
<     atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./md32 #match that the output int is not positive(:overflown)
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
172,173c176
< /* Alternatively we could just do a return ternary of the style "return (int == result of addition)?0:-1;"*/ 
< int main(int argc, char **argv) { int l = INT_MAX; l+= argc; printf("%d\n", l); exit(0); }
---
> int main(int argc, char **argv) { int l = INT_MIN; l-= argc; printf("CHECK\n"); exit(0); }
177c180
< 	atf_check -o not-match:"^[+]?\d+([.]\d+)" -e match:"signed integer overflow" ./test
---
> 	atf_check -s not-exit:0 -o not-match:"CHECK\n" -e match:"signed integer overflow" ./test
196,202c199,203
< 	atf_add_test_case int_add_overflow
< 	atf_add_test_case int_add_overflow_profile
< 	atf_add_test_case int_add_overflow_pie
< 	atf_add_test_case int_add_overflow_pic
< 	atf_add_test_case int_add_overflow32
<     # static option IS NOT supported
<     # gcc 5.5.0 | clang 5.0.1
---
> 	atf_add_test_case int_sub_overflow
> 	atf_add_test_case int_sub_overflow_profile
> 	atf_add_test_case int_sub_overflow_pie
> 	atf_add_test_case int_sub_overflow_pic
> 	atf_add_test_case int_sub_overflow32
